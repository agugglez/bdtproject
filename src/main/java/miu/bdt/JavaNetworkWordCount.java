package miu.bdt;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.json.JSONObject;
import scala.Tuple2;

import java.util.regex.Pattern;

public final class JavaNetworkWordCount {
    private static final Pattern SPACE = Pattern.compile(" ");

    public static void main(String[] args) throws Exception {
//        if (args.length < 2) {
//            System.err.println("Usage: JavaNetworkWordCount <hostname> <port>");
//            System.exit(1);
//        }

        String hostname = "localhost";
        int port = 9999;

        // Create the context with a 1 second batch size
        SparkConf sparkConf = new SparkConf().setMaster("local[*]").setAppName("JavaNetworkWordCount");
        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(3));

        // Create a JavaReceiverInputDStream on target ip:port and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        // Note that no duplication in storage level only for running locally.
        // Replication necessary in distributed scenario for fault tolerance.
        JavaReceiverInputDStream<String> lines = ssc.socketTextStream(hostname,
                port, StorageLevels.MEMORY_AND_DISK_SER);

        JavaDStream<String> titles = lines.map(x -> getTitle(x));
//        JavaPairDStream<String, Integer> wordCounts = titles.mapToPair(s -> new Tuple2<>(s, 1))
//                .reduceByKey((i1, i2) -> i1 + i2);

        titles.print();
        ssc.start();
        ssc.awaitTermination();
    }

    private static String getTitle(String newsJson){
        JSONObject newsObject = new JSONObject(newsJson);
        return newsObject.get("title").toString();
    }
}
